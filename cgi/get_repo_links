#!/usr/bin/perl

=head1 NAME

title_duplicates - warn of duplicate entries based on title

=head1 SYNOPSIS

=head1 DESCRIPTION

Provides a warning box for any other eprints where q prefixes the title.

=cut

use EPrints;

use strict;
use warnings;

#use LWP::UserAgent;
#use WWW::Curl;

my $repo = EPrints->new->current_repository;

my $db = $repo->get_database;
my $xml = $repo->xml;

my $rl_conf = $repo->get_conf("repo_link");

my $jsonp = $repo->param( "json" ) || $repo->param( "jsonp" ) || $repo->param( "callback" ) || "send_data";

my $id = $repo->param( "eprintid" );
$id = $repo->param( "id" ) if !EPrints::Utils::is_set( $id );

if( !defined($id) )
{
        $repo->log( "export_proxy script called without id argument: ".join(',',$repo->param));
        exit(0);
}
elsif( $id =~ /^([0-9]+)$/ )
{
        $id = $1;
}
else
{
        EPrints::abort "Requires numeric id argument";
}

#we can/will replace this call export with invented ilink param with this which is a search exported as JSON

#http://data.uel.ac.uk/cgi/search/archive/advanced/export_ueldr_JSON.js?screen=Search&dataset=archive&_action_export=1&output=JSON&exp=0%7C1%7C-date%2Fcreators_name%2Ftitle%7Carchive%7C-%7Cinternal_link_link%3Ainternal_link_link%3AALL%3AIN%3Ahttp%253A%2F%2Froar.uel.ac.uk%2Fid%2Feprint%2F3550%7C-%7Ceprint_status%3Aeprint_status%3AANY%3AEQ%3Aarchive%7Cmetadata_visibility%3Ametadata_visibility%3AANY%3AEQ%3Ashow

#my $dr_export = $data_config->{data_repo_uri}.$data_config->{data_repo_export}."/$id/JSON/".int(rand(1000000));
print STDERR $rl_conf->{master_repo_uri}."\n";
my $dr_export = $rl_conf->{master_repo_uri}."/cgi/search/archive/advanced/".int(rand(1000000)).".js?screen=Search&dataset=archive&_action_export=1&output=JSON&exp=0%7C1%7C-date%2Fcreators_name%2Ftitle%7Carchive%7C-%7Crepo_link_link%3Arepo_link_link%3AALL%3AIN%3Ahttp%253A%2F%2F".$repo->get_conf("host")."%2Fid%2Feprint%2F$id%7C-%7Ceprint_status%3Aeprint_status%3AANY%3AEQ%3Aarchive%7Cmetadata_visibility%3Ametadata_visibility%3AANY%3AEQ%3Ashow";

print STDERR $dr_export."\n";
if($dr_export !~ /^http:\/\//){
        $dr_export = "http://".$dr_export;
}

my $ua = LWP::UserAgent->new;
my $req =  HTTP::Request->new( GET => $dr_export);
$ua->default_header('Accept' => "application/json");
my $response = $ua->request( $req );

my $res_str = $response->decoded_content;

#Lets send back some useful config data to the client too....
$res_str = "{lookup_response: $res_str, ".
                "eprintid: $id, ".
                "export_script: '".$dr_export.
                "'}";
#binmode(STDOUT, ":utf8"); # data from curl will already be utf8, this seems to double-encode it
$repo->send_http_header( content_type => "application/json; charset=UTF-8" );

if($jsonp){
        $jsonp =~ s/[^=A-Za-z0-9_]//g;
        $res_str = "$jsonp(\n".$res_str;
        $res_str .= ");\n";
}
print $res_str;

